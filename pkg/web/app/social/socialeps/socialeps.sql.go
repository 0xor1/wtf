// Code generated by qtc from "socialeps.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line socialeps.sql:1
package socialeps

//line socialeps.sql:1
import . "github.com/0xor1/tlbx/pkg/core"

//line socialeps.sql:2
import "github.com/0xor1/tlbx/pkg/web/app"

//line socialeps.sql:3
import sqlh "github.com/0xor1/tlbx/pkg/web/app/sql"

//line socialeps.sql:5
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line socialeps.sql:5
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line socialeps.sql:5
func streamqryInsert(qw422016 *qt422016.Writer, args *sqlh.Args, social *social.Socials) {
//line socialeps.sql:6
	qw422016.N().S(`INSERT INTO socials( id, handle, alias, hasAvatar ) VALUES ( ?, ?, ?, ? ) `)
//line socialeps.sql:20
	*args = *sqlh.NewArgs(4)
	args.Append(
		social.ID,
		social.Handle,
		social.Alias,
		social.HasAvatar,
	)

//line socialeps.sql:28
}

//line socialeps.sql:28
func writeqryInsert(qq422016 qtio422016.Writer, args *sqlh.Args, social *social.Socials) {
//line socialeps.sql:28
	qw422016 := qt422016.AcquireWriter(qq422016)
//line socialeps.sql:28
	streamqryInsert(qw422016, args, social)
//line socialeps.sql:28
	qt422016.ReleaseWriter(qw422016)
//line socialeps.sql:28
}

//line socialeps.sql:28
func qryInsert(args *sqlh.Args, social *social.Socials) string {
//line socialeps.sql:28
	qb422016 := qt422016.AcquireByteBuffer()
//line socialeps.sql:28
	writeqryInsert(qb422016, args, social)
//line socialeps.sql:28
	qs422016 := string(qb422016.B)
//line socialeps.sql:28
	qt422016.ReleaseByteBuffer(qb422016)
//line socialeps.sql:28
	return qs422016
//line socialeps.sql:28
}

//line socialeps.sql:30
func streamqrySelect(qw422016 *qt422016.Writer, args *sqlh.Args, ids IDs, handlePrefix string, limit uint16) {
//line socialeps.sql:33
	limit = sqlh.Limit100(limit)
	app.BadReqIf(len(ids) > 100, "max ids to query is 100")
	app.BadReqIf(handlePrefix != "" && StrLen(handlePrefix) < 3, "min handlePrefix len is 3")
	app.BadReqIf(len(ids) == 0 && handlePrefix == "", "no query parameters provided please")
	*args = *sqlh.NewArgs(len(ids) + 1)

//line socialeps.sql:38
	qw422016.N().S(`SELECT id, handle, alias, hasAvatar FROM socials WHERE `)
//line socialeps.sql:45
	switch true {
//line socialeps.sql:46
	case len(ids) > 0:
//line socialeps.sql:46
		qw422016.N().S(`id IN (?`)
//line socialeps.sql:47
		for _ := range ids {
//line socialeps.sql:47
			qw422016.N().S(`,?`)
//line socialeps.sql:47
		}
//line socialeps.sql:47
		qw422016.N().S(`) `)
//line socialeps.sql:49
		*args = *sqlh.NewArgs(len(ids))
		args.Append(ids.ToIs()...)

//line socialeps.sql:52
	case handlePrefix:
//line socialeps.sql:52
		qw422016.N().S(`handle LIKE ? `)
//line socialeps.sql:55
		*args = *sqlh.NewArgs(2)
		args.Append(sqlh.LikePrefix(handlePrefix), limit)

//line socialeps.sql:58
	}
//line socialeps.sql:58
	qw422016.N().S(` `)
//line socialeps.sql:60
}

//line socialeps.sql:60
func writeqrySelect(qq422016 qtio422016.Writer, args *sqlh.Args, ids IDs, handlePrefix string, limit uint16) {
//line socialeps.sql:60
	qw422016 := qt422016.AcquireWriter(qq422016)
//line socialeps.sql:60
	streamqrySelect(qw422016, args, ids, handlePrefix, limit)
//line socialeps.sql:60
	qt422016.ReleaseWriter(qw422016)
//line socialeps.sql:60
}

//line socialeps.sql:60
func qrySelect(args *sqlh.Args, ids IDs, handlePrefix string, limit uint16) string {
//line socialeps.sql:60
	qb422016 := qt422016.AcquireByteBuffer()
//line socialeps.sql:60
	writeqrySelect(qb422016, args, ids, handlePrefix, limit)
//line socialeps.sql:60
	qs422016 := string(qb422016.B)
//line socialeps.sql:60
	qt422016.ReleaseByteBuffer(qb422016)
//line socialeps.sql:60
	return qs422016
//line socialeps.sql:60
}
