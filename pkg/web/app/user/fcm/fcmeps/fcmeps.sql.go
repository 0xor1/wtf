// Code generated by qtc from "fcmeps.sql". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line fcmeps.sql:1
package fcmeps

//line fcmeps.sql:1
import "time"

//line fcmeps.sql:2
import . "github.com/0xor1/tlbx/pkg/core"

//line fcmeps.sql:3
import sqlh "github.com/0xor1/tlbx/pkg/web/app/sql"

//line fcmeps.sql:5
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line fcmeps.sql:5
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line fcmeps.sql:5
func streamqryDistinctTokens(qw422016 *qt422016.Writer, args *sqlh.Args, me ID) {
//line fcmeps.sql:6
	qw422016.N().S(`SELECT DISTINCT token FROM fcmTokens WHERE id=? `)
//line fcmeps.sql:11
	*args = *sqlh.NewArgs(1)
	args.Append(
		me,
	)

//line fcmeps.sql:16
}

//line fcmeps.sql:16
func writeqryDistinctTokens(qq422016 qtio422016.Writer, args *sqlh.Args, me ID) {
//line fcmeps.sql:16
	qw422016 := qt422016.AcquireWriter(qq422016)
//line fcmeps.sql:16
	streamqryDistinctTokens(qw422016, args, me)
//line fcmeps.sql:16
	qt422016.ReleaseWriter(qw422016)
//line fcmeps.sql:16
}

//line fcmeps.sql:16
func qryDistinctTokens(args *sqlh.Args, me ID) string {
//line fcmeps.sql:16
	qb422016 := qt422016.AcquireByteBuffer()
//line fcmeps.sql:16
	writeqryDistinctTokens(qb422016, args, me)
//line fcmeps.sql:16
	qs422016 := string(qb422016.B)
//line fcmeps.sql:16
	qt422016.ReleaseByteBuffer(qb422016)
//line fcmeps.sql:16
	return qs422016
//line fcmeps.sql:16
}

//line fcmeps.sql:18
func streamqryDelete(qw422016 *qt422016.Writer, args *sqlh.Args, me ID, client *ID, createdOn *time.Time) {
//line fcmeps.sql:21
	*args = *sqlh.NewArgs(3)
	args.Append(
		me,
	)

//line fcmeps.sql:24
	qw422016.N().S(`DELETE FROM fcmTokens WHERE id=? `)
//line fcmeps.sql:27
	if client != nil {
//line fcmeps.sql:27
		qw422016.N().S(`AND client=? `)
//line fcmeps.sql:30
		args.Append(
			*client,
		)

//line fcmeps.sql:33
	}
//line fcmeps.sql:34
	if createdOn != nil {
//line fcmeps.sql:34
		qw422016.N().S(`AND createdOn<=? `)
//line fcmeps.sql:37
		args.Append(
			createdOn,
		)

//line fcmeps.sql:40
	}
//line fcmeps.sql:42
}

//line fcmeps.sql:42
func writeqryDelete(qq422016 qtio422016.Writer, args *sqlh.Args, me ID, client *ID, createdOn *time.Time) {
//line fcmeps.sql:42
	qw422016 := qt422016.AcquireWriter(qq422016)
//line fcmeps.sql:42
	streamqryDelete(qw422016, args, me, client, createdOn)
//line fcmeps.sql:42
	qt422016.ReleaseWriter(qw422016)
//line fcmeps.sql:42
}

//line fcmeps.sql:42
func qryDelete(args *sqlh.Args, me ID, client *ID, createdOn *time.Time) string {
//line fcmeps.sql:42
	qb422016 := qt422016.AcquireByteBuffer()
//line fcmeps.sql:42
	writeqryDelete(qb422016, args, me, client, createdOn)
//line fcmeps.sql:42
	qs422016 := string(qb422016.B)
//line fcmeps.sql:42
	qt422016.ReleaseByteBuffer(qb422016)
//line fcmeps.sql:42
	return qs422016
//line fcmeps.sql:42
}

//line fcmeps.sql:44
func streamqryGetEnabled(qw422016 *qt422016.Writer, args *sqlh.Args, me ID) {
//line fcmeps.sql:45
	qw422016.N().S(`SELECT enabled FROM fcms WHERE id=? `)
//line fcmeps.sql:50
	*args = *sqlh.NewArgs(1)
	args.Append(
		me,
	)

//line fcmeps.sql:55
}

//line fcmeps.sql:55
func writeqryGetEnabled(qq422016 qtio422016.Writer, args *sqlh.Args, me ID) {
//line fcmeps.sql:55
	qw422016 := qt422016.AcquireWriter(qq422016)
//line fcmeps.sql:55
	streamqryGetEnabled(qw422016, args, me)
//line fcmeps.sql:55
	qt422016.ReleaseWriter(qw422016)
//line fcmeps.sql:55
}

//line fcmeps.sql:55
func qryGetEnabled(args *sqlh.Args, me ID) string {
//line fcmeps.sql:55
	qb422016 := qt422016.AcquireByteBuffer()
//line fcmeps.sql:55
	writeqryGetEnabled(qb422016, args, me)
//line fcmeps.sql:55
	qs422016 := string(qb422016.B)
//line fcmeps.sql:55
	qt422016.ReleaseByteBuffer(qb422016)
//line fcmeps.sql:55
	return qs422016
//line fcmeps.sql:55
}

//line fcmeps.sql:57
func streamqrySetEnabled(qw422016 *qt422016.Writer, args *sqlh.Args, me ID, enabled bool) {
//line fcmeps.sql:58
	qw422016.N().S(`INSERT INTO fcms ( id, enabled ) VALUES ( ?, ? ) ON DUPLICATE KEY UPDATE id=VALUES(id), enabled=VALUES(enabled) `)
//line fcmeps.sql:69
	*args = *sqlh.NewArgs(2)
	args.Append(
		me,
		enabled,
	)

//line fcmeps.sql:75
}

//line fcmeps.sql:75
func writeqrySetEnabled(qq422016 qtio422016.Writer, args *sqlh.Args, me ID, enabled bool) {
//line fcmeps.sql:75
	qw422016 := qt422016.AcquireWriter(qq422016)
//line fcmeps.sql:75
	streamqrySetEnabled(qw422016, args, me, enabled)
//line fcmeps.sql:75
	qt422016.ReleaseWriter(qw422016)
//line fcmeps.sql:75
}

//line fcmeps.sql:75
func qrySetEnabled(args *sqlh.Args, me ID, enabled bool) string {
//line fcmeps.sql:75
	qb422016 := qt422016.AcquireByteBuffer()
//line fcmeps.sql:75
	writeqrySetEnabled(qb422016, args, me, enabled)
//line fcmeps.sql:75
	qs422016 := string(qb422016.B)
//line fcmeps.sql:75
	qt422016.ReleaseByteBuffer(qb422016)
//line fcmeps.sql:75
	return qs422016
//line fcmeps.sql:75
}

//line fcmeps.sql:77
func streamqryFifthYoungestToken(qw422016 *qt422016.Writer, args *sqlh.Args, me ID) {
//line fcmeps.sql:78
	qw422016.N().S(`SELECT createdOn FROM fcmTokens WHERE id=? ORDER BY createdOn DESC LIMIT 4, 1 `)
//line fcmeps.sql:85
	*args = *sqlh.NewArgs(1)
	args.Append(
		me,
	)

//line fcmeps.sql:90
}

//line fcmeps.sql:90
func writeqryFifthYoungestToken(qq422016 qtio422016.Writer, args *sqlh.Args, me ID) {
//line fcmeps.sql:90
	qw422016 := qt422016.AcquireWriter(qq422016)
//line fcmeps.sql:90
	streamqryFifthYoungestToken(qw422016, args, me)
//line fcmeps.sql:90
	qt422016.ReleaseWriter(qw422016)
//line fcmeps.sql:90
}

//line fcmeps.sql:90
func qryFifthYoungestToken(args *sqlh.Args, me ID) string {
//line fcmeps.sql:90
	qb422016 := qt422016.AcquireByteBuffer()
//line fcmeps.sql:90
	writeqryFifthYoungestToken(qb422016, args, me)
//line fcmeps.sql:90
	qs422016 := string(qb422016.B)
//line fcmeps.sql:90
	qt422016.ReleaseByteBuffer(qb422016)
//line fcmeps.sql:90
	return qs422016
//line fcmeps.sql:90
}

//line fcmeps.sql:92
func streamqryInsert(qw422016 *qt422016.Writer, args *sqlh.Args, topic, token string, me ID, client ID, start time.Time) {
//line fcmeps.sql:93
	qw422016.N().S(`INSERT INTO fcmTokens ( topic, token, id, client, createdOn ) VALUES ( ?, ?, ?, ?, ? ) ON DUPLICATE KEY UPDATE topic=VALUES(topic), token=VALUES(token), id=VALUES(id), client=VALUES(client), createdOn=VALUES(createdOn) `)
//line fcmeps.sql:113
	*args = *sqlh.NewArgs(5)
	args.Append(
		topic,
		token,
		me,
		client,
		start,
	)

//line fcmeps.sql:122
}

//line fcmeps.sql:122
func writeqryInsert(qq422016 qtio422016.Writer, args *sqlh.Args, topic, token string, me ID, client ID, start time.Time) {
//line fcmeps.sql:122
	qw422016 := qt422016.AcquireWriter(qq422016)
//line fcmeps.sql:122
	streamqryInsert(qw422016, args, topic, token, me, client, start)
//line fcmeps.sql:122
	qt422016.ReleaseWriter(qw422016)
//line fcmeps.sql:122
}

//line fcmeps.sql:122
func qryInsert(args *sqlh.Args, topic, token string, me ID, client ID, start time.Time) string {
//line fcmeps.sql:122
	qb422016 := qt422016.AcquireByteBuffer()
//line fcmeps.sql:122
	writeqryInsert(qb422016, args, topic, token, me, client, start)
//line fcmeps.sql:122
	qs422016 := string(qb422016.B)
//line fcmeps.sql:122
	qt422016.ReleaseByteBuffer(qb422016)
//line fcmeps.sql:122
	return qs422016
//line fcmeps.sql:122
}
